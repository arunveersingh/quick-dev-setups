version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"  # Zookeeper client port
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_DATA_LOG_DIR: /var/lib/zookeeper/log
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper  # Kafka depends on Zookeeper
    ports:
      - "9092:9092"  # Kafka broker port
      - "29092:29092"  # Internal listener port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka-data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka  # Schema Registry depends on Kafka
    ports:
      - "8081:8081"  # Schema Registry port
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_DEBUG: 'true'
    volumes:
      - schema-registry-data:/var/lib/schema-registry

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"  # Kafka UI port
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: schema-registry-ui
    ports:
      - "8000:8000"  # Schema Registry UI port
    environment:
      SCHEMAREGISTRY_URL: "http://schema-registry:8081"
      PROXY: "true"

  activemq:
    image: rmohr/activemq:latest
    container_name: activemq
    ports:
      - "8161:8161"  # Web Console
      - "61616:61616"  # JMS
      - "61613:61613"  # STOMP
      - "61614:61614"  # MQTT
      - "61617:61617"  # AMQP
    volumes:
      - activemq-data:/data
      - activemq-conf:/conf

  ibm-mq:
    image: ibmcom/mq:latest
    container_name: ibm-mq
    ports:
      - "1414:1414"  # MQ service listener
      - "9443:9443"  # MQ Console
    environment:
      LICENSE: accept
      MQ_QMGR_NAME: QM1
      MQ_APP_PASSWORD: passw0rd
    volumes:
      - ibm-mq-data:/mnt/mqm

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"  # PostgreSQL port
    environment:
      POSTGRES_DB: example_db
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    command: ["postgres", "-c", "log_statement=all"]

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"  # Map web port 80 in the container to 5050 on the host
    environment:
      PGADMIN_DEFAULT_EMAIL: "dev@myapp.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_SETUP_EMAIL: "admin@myapp.com"
      PGADMIN_SETUP_PASSWORD: "admin"
    volumes:
      - pgadmin4:/var/lib/pgadmin  # Maps a local pgadmin4 directory to the pgadmin persistent storage
      - ./pgadmin-servers.json:/pgadmin4/servers.json  # Server configuration
    depends_on:
      - postgres  # PgAdmin depends on PostgreSQL

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"  # Redis port
    volumes:
      - redis-data:/data

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540"  # Redis Insight port
    depends_on:
      - redis  # Redis Insight depends on Redis

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  schema-registry-data:
  activemq-data:
  activemq-conf:
  ibm-mq-data:
  postgres-data:
  pgadmin4:
  redis-data:
  redisinsight-data: